{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lotteryId",
						"type": "uint256"
					},
					{
						"internalType": "uint32[]",
						"name": "_ticketNumbers",
						"type": "uint32[]"
					}
				],
				"name": "buyTickets",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lotteryId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "_ticketIds",
						"type": "uint256[]"
					},
					{
						"internalType": "uint32[]",
						"name": "_brackets",
						"type": "uint32[]"
					}
				],
				"name": "claimTickets",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lotteryId",
						"type": "uint256"
					}
				],
				"name": "closeLottery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lotteryId",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_seed",
						"type": "bytes32"
					},
					{
						"internalType": "bool",
						"name": "_autoInjection",
						"type": "bool"
					}
				],
				"name": "drawFinalNumberAndMakeLotteryClaimable",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lotteryId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "injectFunds",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_endTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_priceTicketInCake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_discountDivisor",
						"type": "uint256"
					},
					{
						"internalType": "uint256[6]",
						"name": "_rewardsBreakdown",
						"type": "uint256[6]"
					},
					{
						"internalType": "uint256",
						"name": "_treasuryFee",
						"type": "uint256"
					}
				],
				"name": "startLottery",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "viewCurrentLotteryId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"buyTickets(uint256,uint32[])": {
					"details": "Callable by users",
					"params": {
						"_lotteryId": ": lotteryId",
						"_ticketNumbers": ": array of ticket numbers between 1,000,000 and 1,999,999"
					}
				},
				"claimTickets(uint256,uint256[],uint32[])": {
					"details": "Callable by users only, not contract!",
					"params": {
						"_brackets": ": array of brackets for the ticket ids",
						"_lotteryId": ": lottery id",
						"_ticketIds": ": array of ticket ids"
					}
				},
				"closeLottery(uint256)": {
					"details": "Callable by operator",
					"params": {
						"_lotteryId": ": lottery id"
					}
				},
				"drawFinalNumberAndMakeLotteryClaimable(uint256,bytes32,bool)": {
					"details": "Callable by operator",
					"params": {
						"_autoInjection": ": reinjects funds into next lottery (vs. withdrawing all)",
						"_lotteryId": ": lottery id"
					}
				},
				"injectFunds(uint256,uint256)": {
					"details": "Callable by operator",
					"params": {
						"_amount": ": amount to inject in CAKE token",
						"_lotteryId": ": lottery id"
					}
				},
				"startLottery(uint256,uint256,uint256,uint256[6],uint256)": {
					"details": "Callable by operator",
					"params": {
						"_discountDivisor": ": the divisor to calculate the discount magnitude for bulks",
						"_endTime": ": endTime of the lottery",
						"_priceTicketInCake": ": price of a ticket in CAKE",
						"_rewardsBreakdown": ": breakdown of rewards per bracket (must sum to 10,000)",
						"_treasuryFee": ": treasury fee (10,000 = 100%, 100 = 1%)"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"buyTickets(uint256,uint32[])": {
					"notice": "Buy tickets for the current lottery"
				},
				"claimTickets(uint256,uint256[],uint32[])": {
					"notice": "Claim a set of winning tickets for a lottery"
				},
				"closeLottery(uint256)": {
					"notice": "Close lottery"
				},
				"drawFinalNumberAndMakeLotteryClaimable(uint256,bytes32,bool)": {
					"notice": "Draw the final number, calculate reward in CAKE per group, and make lottery claimable"
				},
				"injectFunds(uint256,uint256)": {
					"notice": "Inject funds"
				},
				"startLottery(uint256,uint256,uint256,uint256[6],uint256)": {
					"notice": "Start the lottery"
				},
				"viewCurrentLotteryId()": {
					"notice": "View current lottery id"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"source/Lottery.sol": "IPancakeSwapLottery"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 99999
		},
		"remappings": []
	},
	"sources": {
		"source/Lottery.sol": {
			"keccak256": "0x689e543f45b621a6f222c3d03e7d6305cf42bfb5f5a76df717042b08f57d336c",
			"license": "MIT",
			"urls": [
				"bzz-raw://4c96b38a99511c3e464694a38cca52332f297c59e837ff4a846baff572f42a18",
				"dweb:/ipfs/QmRR5WHDpNDsYuZ2T5mazc3xnwj7zkfNKRDhFr62bostXk"
			]
		}
	},
	"version": 1
}